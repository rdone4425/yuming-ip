name: Update Loon Domain Rules

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
        
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Create update script
      run: |
        cat > extract_domains.py << 'EOF'
        import requests
        from datetime import datetime
        import os

        def extract_domains():
            # 获取目录列表
            directory_url = "https://raw.githubusercontent.com/rdone4425/yuming-ip/main/yuming-ip/loon.txt"
            try:
                response = requests.get(directory_url)
                response.raise_for_status()
                directories = response.text.strip().split('\n')
                
                base_url = "https://raw.githubusercontent.com/rdone4425/ios_rule_script/master/rule/Loon"
                all_domains = set()
                
                for directory in directories:
                    try:
                        # 构建规则文件URL
                        rule_url = f"{base_url}/{directory}/{directory}.list"
                        response = requests.get(rule_url)
                        response.raise_for_status()
                        content = response.text.split('\n')
                        
                        # 提取域名
                        for line in content:
                            line = line.strip()
                            if not line or line.startswith('#'):
                                continue
                                
                            # 处理不同类型的规则
                            if 'DOMAIN,' in line:
                                domain = line.split('DOMAIN,')[1].strip()
                                all_domains.add(f"DOMAIN,{domain}")
                            elif 'DOMAIN-SUFFIX,' in line:
                                domain = line.split('DOMAIN-SUFFIX,')[1].strip()
                                all_domains.add(f"DOMAIN-SUFFIX,{domain}")
                            elif 'DOMAIN-KEYWORD,' in line:
                                keyword = line.split('DOMAIN-KEYWORD,')[1].strip()
                                all_domains.add(f"DOMAIN-KEYWORD,{keyword}")
                        
                        print(f"Processed {directory}")
                        
                    except Exception as e:
                        print(f"Error processing {directory}: {e}")
                        continue
                
                # 创建输出目录
                os.makedirs('ios_rule_script', exist_ok=True)
                
                # 保存所有域名到文件，保持原始规则格式
                with open('ios_rule_script/merged_domains.list', 'w', encoding='utf-8') as f:
                    # 添加文件头部信息
                    f.write(f"# 合并时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"# 总规则数: {len(all_domains)}\n\n")
                    for domain in sorted(all_domains):
                        f.write(f"{domain}\n")
                
                print(f"Total unique domains extracted: {len(all_domains)}")
                return True
                
            except Exception as e:
                print(f"Error: {e}")
                return False
        
        if __name__ == "__main__":
            success = extract_domains()
            exit(0 if success else 1)
        EOF
        
    - name: Run update script
      run: python extract_domains.py
        
    - name: Commit and push if changed
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "action@github.com"
        git add ios_rule_script/
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update merged domain rules $(date '+%Y-%m-%d %H:%M:%S')" && git push)
