name: DNS Lookup for Domains

on:
  schedule:
    - cron: '0 0 1,16 * *'  # 每月1号和16号的0点运行
  workflow_dispatch:  # 允许手动触发

jobs:
  update-geoip:
    uses: ./.github/workflows/GeoIP3.yml  # 修改为正确的文件名
    secrets: inherit  # 继承secrets

  dns-lookup:
    needs: update-geoip  # 等待 GeoIP 更新完成
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}
        
    - name: Set up Python
      uses: actions/setup-python@v4  # 更新到 v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dnspython geoip2 requests ipaddress aiodns asyncio
        
    - name: Create DNS lookup script
      run: |
        cat > dns_lookup.py << 'EOF'
        import asyncio
        import aiodns
        import os
        from datetime import datetime
        import geoip2.database
        import ipaddress
        import time
        import random
        
        # 定义一些快速的公共DNS服务器
        DNS_SERVERS = [
            '8.8.8.8',        # Google DNS
            '8.8.4.4',        # Google DNS
            '1.1.1.1',        # Cloudflare
            '1.0.0.1',        # Cloudflare
            '9.9.9.9',        # Quad9
            '149.112.112.112',# Quad9
            '208.67.222.222', # OpenDNS
            '208.67.220.220', # OpenDNS
            '64.6.64.6',      # Verisign
            '64.6.65.6'       # Verisign
        ]
        
        CLOUDFLARE_IPV4 = [
            '173.245.48.0/20', '103.21.244.0/22', '103.22.200.0/22', '103.31.4.0/22',
            '141.101.64.0/18', '108.162.192.0/18', '190.93.240.0/20', '188.114.96.0/20',
            '197.234.240.0/22', '198.41.128.0/17', '162.158.0.0/15', '104.16.0.0/13',
            '104.24.0.0/14', '172.64.0.0/13', '131.0.72.0/22'
        ]
        
        CLOUDFLARE_IPV6 = [
            '2400:cb00::/32', '2606:4700::/32', '2803:f800::/32', '2405:b500::/32',
            '2405:8100::/32', '2a06:98c0::/29', '2c0f:f248::/32'
        ]
        
        def is_cloudflare_ip(ip_str):
            try:
                ip = ipaddress.ip_address(ip_str)
                ip_networks = CLOUDFLARE_IPV4 if ip.version == 4 else CLOUDFLARE_IPV6
                return any(ip in ipaddress.ip_network(net) for net in ip_networks)
            except ValueError:
                return False

        def is_private_ip(ip_str):
            try:
                ip = ipaddress.ip_address(ip_str)
                return ip.is_private
            except ValueError:
                return False

        def is_china_ip(ip_str, reader):
            try:
                response = reader.country(ip_str)
                return response.country.iso_code == 'CN'
            except:
                return False
        
        def create_resolver():
            # 创建一个新的异步解析器并随机选择DNS服务器
            nameserver = random.choice(DNS_SERVERS)
            resolver = aiodns.DNSResolver(nameservers=[nameserver])
            return resolver
        
        async def query_record(resolver, domain, record_type):
            try:
                result = await resolver.query(domain, record_type)
                return result
            except Exception:
                return []
        
        async def process_domain(domain, reader, semaphore):
            async with semaphore:  # 使用信号量限制并发数
                results = {
                    'ipv4': set(),
                    'ipv6': set(),
                    'cname': set()
                }
                
                if not domain:
                    return results
                
                # 为每个域名创建一个新的解析器，使用随机DNS服务器
                resolver = create_resolver()
                
                # 并行查询不同类型的记录
                a_result, aaaa_result, cname_result = await asyncio.gather(
                    query_record(resolver, domain, 'A'),
                    query_record(resolver, domain, 'AAAA'),
                    query_record(resolver, domain, 'CNAME'),
                    return_exceptions=True
                )
                
                # 处理A记录 (IPv4)
                if isinstance(a_result, list) or hasattr(a_result, '__iter__'):
                    for rdata in a_result:
                        if hasattr(rdata, 'host'):
                            ip = rdata.host
                            if not (is_private_ip(ip) or is_china_ip(ip, reader) or is_cloudflare_ip(ip)):
                                results['ipv4'].add(ip)
                
                # 处理AAAA记录 (IPv6)
                if isinstance(aaaa_result, list) or hasattr(aaaa_result, '__iter__'):
                    for rdata in aaaa_result:
                        if hasattr(rdata, 'host'):
                            ip = rdata.host
                            if not (is_private_ip(ip) or is_china_ip(ip, reader) or is_cloudflare_ip(ip)):
                                results['ipv6'].add(ip)
                
                # 处理CNAME记录
                if isinstance(cname_result, list) or hasattr(cname_result, '__iter__'):
                    for rdata in cname_result:
                        if hasattr(rdata, 'cname'):
                            cname = rdata.cname.rstrip('.')
                            results['cname'].add(cname)
                
                return results
        
        # 将批次结果写入临时文件
        def write_batch_results(batch_num, ipv4_set, ipv6_set, cname_set):
            os.makedirs('ios_rule_script/temp', exist_ok=True)
            
            # 写入IPv4结果
            with open(f'ios_rule_script/temp/batch_{batch_num}_ipv4.txt', 'w', encoding='utf-8') as f:
                for ip in sorted(ipv4_set):
                    f.write(f"{ip}\n")
            
            # 写入IPv6结果
            with open(f'ios_rule_script/temp/batch_{batch_num}_ipv6.txt', 'w', encoding='utf-8') as f:
                for ip in sorted(ipv6_set):
                    f.write(f"{ip}\n")
            
            # 写入CNAME结果
            with open(f'ios_rule_script/temp/batch_{batch_num}_cname.txt', 'w', encoding='utf-8') as f:
                for cname in sorted(cname_set):
                    f.write(f"{cname}\n")
        
        # 合并所有批次结果并删除临时文件
        def merge_and_cleanup_results(total_batches):
            ipv4_set = set()
            ipv6_set = set()
            cname_set = set()
            
            # 读取所有批次文件并合并结果
            for batch_num in range(1, total_batches + 1):
                # 读取IPv4
                try:
                    with open(f'ios_rule_script/temp/batch_{batch_num}_ipv4.txt', 'r', encoding='utf-8') as f:
                        for line in f:
                            ipv4_set.add(line.strip())
                except FileNotFoundError:
                    pass
                
                # 读取IPv6
                try:
                    with open(f'ios_rule_script/temp/batch_{batch_num}_ipv6.txt', 'r', encoding='utf-8') as f:
                        for line in f:
                            ipv6_set.add(line.strip())
                except FileNotFoundError:
                    pass
                
                # 读取CNAME
                try:
                    with open(f'ios_rule_script/temp/batch_{batch_num}_cname.txt', 'r', encoding='utf-8') as f:
                        for line in f:
                            cname_set.add(line.strip())
                except FileNotFoundError:
                    pass
            
            # 写入最终结果
            with open('ios_rule_script/dns_results_ipv4.txt', 'w', encoding='utf-8') as f:
                for ip in sorted(ipv4_set):
                    f.write(f"{ip}\n")
            
            with open('ios_rule_script/dns_results_ipv6.txt', 'w', encoding='utf-8') as f:
                for ip in sorted(ipv6_set):
                    f.write(f"{ip}\n")
            
            with open('ios_rule_script/dns_results_cname.txt', 'w', encoding='utf-8') as f:
                for cname in sorted(cname_set):
                    f.write(f"{cname}\n")
            
            # 删除临时文件夹
            import shutil
            shutil.rmtree('ios_rule_script/temp', ignore_errors=True)
            
            return len(ipv4_set), len(ipv6_set), len(cname_set)
        
        async def perform_dns_lookup():
            try:
                reader = geoip2.database.Reader('ios_rule_script/GeoLite2-Country.mmdb')
                
                # 修改为正确的本地路径
                with open('ios_rule_script/merged_domains.list', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                os.makedirs('ios_rule_script', exist_ok=True)
                
                domains_to_process = []
                
                # 提取所有需要处理的域名
                for line in lines:
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                        
                    domain = None
                    if 'DOMAIN,' in line:
                        domain = line.split('DOMAIN,')[1]
                    elif 'DOMAIN-SUFFIX,' in line:
                        domain = line.split('DOMAIN-SUFFIX,')[1]
                    elif 'DOMAIN-KEYWORD,' in line:
                        continue
                    
                    if domain:
                        domains_to_process.append(domain)
                
                # 使用异步并发处理域名
                total_domains = len(domains_to_process)
                print(f"开始处理 {total_domains} 个域名...")
                
                # 创建信号量限制并发数
                semaphore = asyncio.Semaphore(300)  # 同时处理300个域名
                
                # 分批处理，每批处理500个域名
                batch_size = 500
                total_batches = (total_domains + batch_size - 1) // batch_size
                
                for i in range(0, total_domains, batch_size):
                    batch_num = i // batch_size + 1
                    batch = domains_to_process[i:i+batch_size]
                    print(f"处理批次 {batch_num}/{total_batches}，共 {len(batch)} 个域名")
                    
                    # 当前批次的结果集
                    batch_ipv4_set = set()
                    batch_ipv6_set = set()
                    batch_cname_set = set()
                    
                    # 创建所有域名的任务
                    tasks = [process_domain(domain, reader, semaphore) for domain in batch]
                    
                    # 等待所有任务完成
                    batch_results = await asyncio.gather(*tasks, return_exceptions=True)
                    
                    # 处理结果
                    for result in batch_results:
                        if isinstance(result, dict):
                            batch_ipv4_set.update(result['ipv4'])
                            batch_ipv6_set.update(result['ipv6'])
                            batch_cname_set.update(result['cname'])
                        else:
                            print(f"处理域名时出错: {result}")
                    
                    # 将当前批次的结果写入临时文件
                    write_batch_results(batch_num, batch_ipv4_set, batch_ipv6_set, batch_cname_set)
                    
                    print(f"批次 {batch_num} 完成，找到 {len(batch_ipv4_set)} 个IPv4地址，{len(batch_ipv6_set)} 个IPv6地址，{len(batch_cname_set)} 个CNAME记录")
                    
                    # 每批处理完后暂停一下，避免请求过于频繁
                    await asyncio.sleep(0.2)  # 减少等待时间
                
                # 合并所有批次结果并删除临时文件
                ipv4_count, ipv6_count, cname_count = merge_and_cleanup_results(total_batches)
                
                reader.close()
                print(f"处理完成。总共找到 {ipv4_count} 个IPv4地址，{ipv6_count} 个IPv6地址，{cname_count} 个CNAME记录。")
                return True
                
            except Exception as e:
                print(f"Error: {e}")
                return False
        
        if __name__ == "__main__":
            success = asyncio.run(perform_dns_lookup())
            exit(0 if success else 1)
        EOF
        
    - name: Run DNS lookup script
      run: python dns_lookup.py
        
    - name: Commit and push results
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "action@github.com"
        # 先拉取最新的远程更改
        git pull --rebase origin master
        git add ios_rule_script/dns_results_ipv4.txt
        git add ios_rule_script/dns_results_ipv6.txt
        git add ios_rule_script/dns_results_cname.txt
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update DNS lookup results $(date '+%Y-%m-%d %H:%M:%S')" && git push)
